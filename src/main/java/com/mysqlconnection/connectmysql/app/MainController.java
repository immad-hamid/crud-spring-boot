package com.mysqlconnection.connectmysql.app;

import com.mysqlconnection.connectmysql.ConnectMysqlApplication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MainController  {
    private static final Logger LOG = Logger.getLogger(ConnectMysqlApplication.class.getName());

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private RestTemplate restTemplate;
    private User dto;

    final String uri = "https://jsonplaceholder.typicode.com/todos";

    @GetMapping(path = "/getUsers")
    public ResponseEntity<Object> getPosts() {
        ResponseEntity<Object> response = restTemplate.exchange(uri,
                HttpMethod.GET, null, Object.class);
        logResults("GET: Getting all posts from JSONPlaceHolder");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @GetMapping(path="/users")
    public @ResponseBody Iterable<User> getAllUsers() {
        LOG.log(Level.INFO, "GET: Getting all users");
        logResults("GET: Getting all users");
        return userRepository.findAll();
    }

    @GetMapping(path="/users/{id}") // Map ONLY GET Requests
    public @ResponseBody User getUser(@PathVariable Integer id) {
        User n = new User();
        n = userRepository.findById(id).get();
        LOG.log(Level.INFO, "GET: Getting user with id " + id);
        logResults("GET: Getting user with id " + id);
        return n;
    }

    @PostMapping(path="/users") // Map ONLY GET Requests
    public @ResponseBody User addNewUser (@RequestBody User dto) {
        User n = new User();
        n.setName(dto.getName());
        n.setEmail(dto.getEmail());
        userRepository.save(n);
        LOG.log(Level.INFO, "POST: Posted user with id " + n.getId());
        logResults("POST: Posted user with id " + n.getId());
        return n;
    }

    @PutMapping(path="/users/{id}") // Map ONLY GET Requests
    public @ResponseBody User updateUser(@RequestBody User dto, @PathVariable Integer id) {
        User n = new User();
        n = userRepository.findById(id).get();
        n.setName(dto.getName());
        n.setEmail(dto.getEmail());
        userRepository.save(n);
        LOG.log(Level.INFO, "UPDATE: Updated user with id " + id);
        logResults("UPDATE: Updated user with id " + id);
        return n;
    }

    @DeleteMapping(path="/users/{id}") // Map ONLY GET Requests
    public @ResponseBody User deleteUser(@PathVariable Integer id) {
        User n = new User();
        n = userRepository.findById(id).get();
        userRepository.delete(n);
        LOG.log(Level.INFO, "DELETE: Deleted user with id " + id);
        logResults("DELETE: Deleted user with id " + id);
        return n;
    }

    // add users using query parameters
    @GetMapping(path="/add")
    public @ResponseBody User addNewUser (@RequestParam String name
            , @RequestParam String email) {
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return n;
    }

    private void logResults(String text) {
        try{
            FileWriter fw = new FileWriter("D:\\logFile.txt", true);
            fw.write(text + "\n");
            fw.close();
            System.out.println("Success...");
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
}